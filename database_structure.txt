--These are the required tables in the database you can directly copy and paste it to the mysql


-- 0. Create the database if it doesn't exist


CREATE DATABASE IF NOT EXISTS alumni_db;
USE alumni_db;


-- 1. Users Table: The central table for all user roles
-- NOTE: is_mentor column added for performance optimization - eliminates need for joins when checking mentor status


CREATE TABLE `users` (
  `user_id` INT AUTO_INCREMENT PRIMARY KEY,
  `full_name` VARCHAR(255) NOT NULL,
  `email` VARCHAR(255) NOT NULL UNIQUE,
  `password_hash` VARCHAR(255) NOT NULL,
  `role` ENUM('admin', 'alumni', 'student', 'institute', 'faculty', 'employer') DEFAULT 'alumni' NOT NULL,
  `is_mentor` BOOLEAN DEFAULT FALSE NOT NULL,
  `profile_pic_url` VARCHAR(255) NULL,
  `verification_status` ENUM('unverified', 'pending', 'verified') DEFAULT 'unverified',
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  `onboarding_complete` BOOLEAN DEFAULT FALSE,
  `dob` DATE NULL,
  `address` VARCHAR(255) NULL,
  `city` VARCHAR(100) NULL,
  `country` VARCHAR(100) NULL,
  `phone_number` VARCHAR(20) NULL,
  `linkedin_profile` VARCHAR(255) NULL,
  `graduation_year` INT NULL,
  `major` VARCHAR(255) NULL,
  `job_title` VARCHAR(255) NULL,
  `company` VARCHAR(255) NULL,
  `department` VARCHAR(255) NULL,
  `institute_name` VARCHAR(255) NULL,
  `industry` VARCHAR(255) NULL,
  `website` VARCHAR(255) NULL,
  `bio` TEXT NULL,
  `skills` VARCHAR(255) NULL,
  `experience_years` INT NULL,
  `specialization` VARCHAR(255) NULL,
  `current_position` VARCHAR(255) NULL,
  `research_interests` TEXT NULL,
  `achievements` TEXT NULL,
  `certifications` TEXT NULL,
  `languages` VARCHAR(255) NULL,
  `current_year` INT NULL,
  `gpa` DECIMAL(3,2) NULL,
  `expected_graduation` INT NULL,
  `company_size` ENUM('startup', 'small', 'medium', 'large', 'enterprise') NULL, 
  `founded_year` INT NULL
  `student_count` INT NULL,
  `location_coordinates` POINT NULL,
  `social_media_links` JSON NULL,
  `availability_status` ENUM('available', 'busy', 'unavailable') DEFAULT 'available', 
  `reset_token` VARCHAR(255) NULL,
  `reset_token_expiry` TIMESTAMP NULL,
  `is_profile_public` BOOLEAN DEFAULT TRUE,
  `is_email_visible` BOOLEAN DEFAULT TRUE,
  `is_company_visible` BOOLEAN DEFAULT TRUE,
  `is_location_visible` BOOLEAN DEFAULT TRUE
);


-- 2. Blogs Table


CREATE TABLE `blogs` (
  `blog_id` INT AUTO_INCREMENT PRIMARY KEY,
  `author_id` INT,
  `title` VARCHAR(255) NOT NULL,
  `image_url` VARCHAR(255) NULL DEFAULT NULL AFTER `content`,
`status` ENUM('pending', 'approved', 'rejected') NOT NULL DEFAULT 'approved',
  `content` TEXT NOT NULL,
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (`author_id`) REFERENCES `users`(`user_id`) ON DELETE CASCADE
);


-- 3. Events Table


CREATE TABLE `events` (
  `event_id` INT AUTO_INCREMENT PRIMARY KEY,
  `title` VARCHAR(255) NOT NULL,
  `description` TEXT NOT NULL,
  `date` DATETIME NOT NULL,
  `location` VARCHAR(255) NOT NULL,
  `organizer` VARCHAR(255),
  `status` ENUM('pending', 'approved', 'rejected') DEFAULT 'pending',
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


-- 4. Event RSVPs Table (Many-to-Many relationship between users and events)


CREATE TABLE `event_rsvps` (
  `event_id` INT,
  `user_id` INT,
  `rsvp_date` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`event_id`, `user_id`),
  FOREIGN KEY (`event_id`) REFERENCES `events`(`event_id`) ON DELETE CASCADE,
  FOREIGN KEY (`user_id`) REFERENCES `users`(`user_id`) ON DELETE CASCADE
);


-- 5. Jobs Table


CREATE TABLE `jobs` (
  `job_id` INT AUTO_INCREMENT PRIMARY KEY,
  `title` VARCHAR(255) NOT NULL,
  `company` VARCHAR(255) NOT NULL,
  `location` VARCHAR(255) NOT NULL,
  `description` TEXT NOT NULL,
  `contact_email` VARCHAR(255),
  `status` ENUM('pending', 'approved', 'rejected') DEFAULT 'pending',
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


-- 6. Job Applications Table


CREATE TABLE `job_applications` (
  `application_id` INT AUTO_INCREMENT PRIMARY KEY,
  `job_id` INT,
  `user_email` VARCHAR(255) NOT NULL,
  `full_name` VARCHAR(255) NOT NULL,
  `resume_path` VARCHAR(255) NOT NULL,
  `cover_letter` TEXT,
  `application_date` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  `status` ENUM('pending', 'accepted', 'rejected') DEFAULT 'pending',
  `admin_notes` TEXT,
  FOREIGN KEY (`job_id`) REFERENCES `jobs`(`job_id`) ON DELETE CASCADE
);


-- 7. Enhanced Mentors Table with comprehensive profile data


CREATE TABLE `mentors` (
  `mentor_id` INT AUTO_INCREMENT PRIMARY KEY,
  `user_id` INT NOT NULL UNIQUE,
  `expertise_areas` TEXT,
  `is_available` BOOLEAN DEFAULT TRUE,
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  -- Enhanced fields for comprehensive mentor profiles
  `industry` VARCHAR(100),
  `experience_years` INT,
  `hourly_rate` DECIMAL(10,2) DEFAULT 0,
  `bio` TEXT,
  `skills` TEXT,
  `languages` VARCHAR(255) DEFAULT 'English',
  `timezone` VARCHAR(50) DEFAULT 'UTC',
  `video_intro_url` VARCHAR(500),
  `linkedin_url` VARCHAR(500),
  `github_url` VARCHAR(500),
  `portfolio_url` VARCHAR(500),
  `mentoring_style` ENUM('one_on_one', 'group', 'workshop', 'mixed') DEFAULT 'one_on_one',
  `communication_methods` JSON,
  `verification_level` ENUM('basic', 'verified', 'premium') DEFAULT 'basic',
  `total_mentees` INT DEFAULT 0,
  `total_sessions` INT DEFAULT 0,
  `average_rating` DECIMAL(3,2) DEFAULT 0.00,
  `total_reviews` INT DEFAULT 0,
  `is_premium` BOOLEAN DEFAULT FALSE,
  `response_time_hours` INT DEFAULT 24,
  `success_rate` DECIMAL(5,2) DEFAULT 0.00,
  `updated_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (`user_id`) REFERENCES `users`(`user_id`) ON DELETE CASCADE
);


-- 7a. Mentor Specializations Table


CREATE TABLE `mentor_specializations` (
  `specialization_id` INT AUTO_INCREMENT PRIMARY KEY,
  `mentor_id` INT NOT NULL,
  `specialization` VARCHAR(100) NOT NULL,
  `proficiency_level` ENUM('beginner', 'intermediate', 'advanced', 'expert') DEFAULT 'intermediate',
  `years_experience` INT DEFAULT 0,
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (`mentor_id`) REFERENCES `mentors`(`mentor_id`) ON DELETE CASCADE,
  INDEX `idx_mentor_spec` (`mentor_id`, `specialization`)
);


-- 7b. Mentor Availability Table


CREATE TABLE `mentor_availability` (
  `availability_id` INT AUTO_INCREMENT PRIMARY KEY,
  `mentor_id` INT NOT NULL,
  `day_of_week` ENUM('monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday') NOT NULL,
  `start_time` TIME NOT NULL,
  `end_time` TIME NOT NULL,
  `is_available` BOOLEAN DEFAULT TRUE,
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (`mentor_id`) REFERENCES `mentors`(`mentor_id`) ON DELETE CASCADE,
  INDEX `idx_mentor_availability` (`mentor_id`, `day_of_week`)
);


-- 7c. Mentor Reviews Table


CREATE TABLE `mentor_reviews` (
  `review_id` INT AUTO_INCREMENT PRIMARY KEY,
  `mentor_id` INT NOT NULL,
  `reviewer_user_id` INT NOT NULL,
  `rating` INT NOT NULL CHECK (`rating` >= 1 AND `rating` <= 5),
  `review_text` TEXT,
  `session_quality` INT CHECK (`session_quality` >= 1 AND `session_quality` <= 5),
  `communication_rating` INT CHECK (`communication_rating` >= 1 AND `communication_rating` <= 5),
  `helpfulness_rating` INT CHECK (`helpfulness_rating` >= 1 AND `helpfulness_rating` <= 5),
  `would_recommend` BOOLEAN DEFAULT TRUE,
  `is_verified` BOOLEAN DEFAULT FALSE,
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (`mentor_id`) REFERENCES `mentors`(`mentor_id`) ON DELETE CASCADE,
  FOREIGN KEY (`reviewer_user_id`) REFERENCES `users`(`user_id`) ON DELETE CASCADE,
  UNIQUE KEY `unique_review` (`mentor_id`, `reviewer_user_id`),
  INDEX `idx_mentor_reviews` (`mentor_id`, `rating`)
);


-- 7d. Mentor Sessions Table


CREATE TABLE `mentor_sessions` (
  `session_id` INT AUTO_INCREMENT PRIMARY KEY,
  `mentor_id` INT NOT NULL,
  `mentee_user_id` INT NOT NULL,
  `session_title` VARCHAR(255),
  `session_description` TEXT,
  `scheduled_datetime` DATETIME NOT NULL,
  `actual_start_time` DATETIME,
  `actual_end_time` DATETIME,
  `duration_minutes` INT DEFAULT 60,
  `session_type` ENUM('consultation', 'code_review', 'career_advice', 'mock_interview', 'project_guidance', 'other') DEFAULT 'consultation',
  `status` ENUM('scheduled', 'in_progress', 'completed', 'cancelled', 'no_show') DEFAULT 'scheduled',
  `meeting_url` VARCHAR(500),
  `session_notes` TEXT,
  `mentor_feedback` TEXT,
  `mentee_feedback` TEXT,
  `price_paid` DECIMAL(10,2) DEFAULT 0,
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (`mentor_id`) REFERENCES `mentors`(`mentor_id`) ON DELETE CASCADE,
  FOREIGN KEY (`mentee_user_id`) REFERENCES `users`(`user_id`) ON DELETE CASCADE,
  INDEX `idx_mentor_sessions` (`mentor_id`, `scheduled_datetime`),
  INDEX `idx_mentee_sessions` (`mentee_user_id`, `scheduled_datetime`)
);


-- 7e. Mentor Achievements Table


CREATE TABLE `mentor_achievements` (
  `achievement_id` INT AUTO_INCREMENT PRIMARY KEY,
  `mentor_id` INT NOT NULL,
  `achievement_type` ENUM('certification', 'award', 'publication', 'speaking', 'project', 'education') NOT NULL,
  `title` VARCHAR(255) NOT NULL,
  `description` TEXT,
  `issuer_organization` VARCHAR(255),
  `achievement_date` DATE,
  `verification_url` VARCHAR(500),
  `image_url` VARCHAR(500),
  `is_featured` BOOLEAN DEFAULT FALSE,
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (`mentor_id`) REFERENCES `mentors`(`mentor_id`) ON DELETE CASCADE,
  INDEX `idx_mentor_achievements` (`mentor_id`, `achievement_type`)
);


-- 7f. Mentor Portfolio Table


CREATE TABLE `mentor_portfolio` (
  `portfolio_id` INT AUTO_INCREMENT PRIMARY KEY,
  `mentor_id` INT NOT NULL,
  `project_title` VARCHAR(255) NOT NULL,
  `project_description` TEXT,
  `project_url` VARCHAR(500),
  `image_url` VARCHAR(500),
  `technologies_used` TEXT,
  `project_type` ENUM('web_app', 'mobile_app', 'desktop_app', 'research', 'consulting', 'other') DEFAULT 'other',
  `completion_date` DATE,
  `is_featured` BOOLEAN DEFAULT FALSE,
  `display_order` INT DEFAULT 0,
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (`mentor_id`) REFERENCES `mentors`(`mentor_id`) ON DELETE CASCADE,
  INDEX `idx_mentor_portfolio` (`mentor_id`, `is_featured`, `display_order`)
);


-- 7g. Mentor Analytics Table


CREATE TABLE `mentor_analytics` (
  `analytics_id` INT AUTO_INCREMENT PRIMARY KEY,
  `mentor_id` INT NOT NULL,
  `date` DATE NOT NULL,
  `profile_views` INT DEFAULT 0,
  `message_requests` INT DEFAULT 0,
  `session_requests` INT DEFAULT 0,
  `sessions_completed` INT DEFAULT 0,
  `response_time_avg_minutes` INT DEFAULT 0,
  `earnings` DECIMAL(10,2) DEFAULT 0,
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (`mentor_id`) REFERENCES `mentors`(`mentor_id`) ON DELETE CASCADE,
  UNIQUE KEY `unique_mentor_date` (`mentor_id`, `date`),
  INDEX `idx_mentor_analytics` (`mentor_id`, `date`)
);


-- 7h. Mentor Pricing Tiers Table


CREATE TABLE `mentor_pricing_tiers` (
  `tier_id` INT AUTO_INCREMENT PRIMARY KEY,
  `mentor_id` INT NOT NULL,
  `tier_name` VARCHAR(100) NOT NULL,
  `tier_description` TEXT,
  `price_per_hour` DECIMAL(10,2) NOT NULL,
  `session_duration_minutes` INT DEFAULT 60,
  `features` JSON,
  `is_active` BOOLEAN DEFAULT TRUE,
  `max_mentees_per_month` INT,
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (`mentor_id`) REFERENCES `mentors`(`mentor_id`) ON DELETE CASCADE,
  INDEX `idx_mentor_pricing` (`mentor_id`, `is_active`)
);


-- 7i. Mentor Preferences Table


CREATE TABLE `mentor_preferences` (
  `preference_id` INT AUTO_INCREMENT PRIMARY KEY,
  `mentor_id` INT NOT NULL,
  `notification_email` BOOLEAN DEFAULT TRUE,
  `notification_sms` BOOLEAN DEFAULT FALSE,
  `auto_accept_requests` BOOLEAN DEFAULT FALSE,
  `max_mentees_active` INT DEFAULT 10,
  `preferred_session_length` INT DEFAULT 60,
  `advance_booking_days` INT DEFAULT 7,
  `buffer_time_minutes` INT DEFAULT 15,
  `weekend_availability` BOOLEAN DEFAULT FALSE,
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (`mentor_id`) REFERENCES `mentors`(`mentor_id`) ON DELETE CASCADE,
  UNIQUE KEY `unique_mentor_preferences` (`mentor_id`)
);


-- 8. Mentor Requests Table


CREATE TABLE `mentor_requests` (
  `request_id` INT AUTO_INCREMENT PRIMARY KEY,
  `mentor_user_id` INT,
  `mentee_user_id` INT,
  `request_message` TEXT,
  `status` ENUM('pending', 'accepted', 'declined') DEFAULT 'pending',
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UNIQUE KEY `unique_request` (`mentor_user_id`, `mentee_user_id`),
  FOREIGN KEY (`mentor_user_id`) REFERENCES `users`(`user_id`) ON DELETE CASCADE,
  FOREIGN KEY (`mentee_user_id`) REFERENCES `users`(`user_id`) ON DELETE CASCADE
);


-- 9. Campaigns Table


CREATE TABLE `campaigns` (
  `campaign_id` INT AUTO_INCREMENT PRIMARY KEY,
  `title` VARCHAR(255) NOT NULL,
  `description` TEXT NOT NULL,
  `goal_amount` DECIMAL(10, 2) NOT NULL,
  `current_amount` DECIMAL(10, 2) DEFAULT 0.00,
  `start_date` DATE,
  `end_date` DATE,
  `image_url` VARCHAR(255),
  `status` ENUM('pending', 'approved', 'rejected') DEFAULT 'pending',
  `created_by` INT,
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (`created_by`) REFERENCES `users`(`user_id`) ON DELETE SET NULL
);


-- 10. Notifications Table


CREATE TABLE `notifications` (
 `notification_id` INT AUTO_INCREMENT PRIMARY KEY,
 `user_id` INT,
 `actor_user_id` INT,
 `notification_type` VARCHAR(50) NULL,
 `reference_id` INT,
 `reference_type` VARCHAR(50) NULL,
  `message` TEXT NOT NULL,
  `is_read` BOOLEAN DEFAULT FALSE,
  `link` VARCHAR(255),
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (`user_id`) REFERENCES `users`(`user_id`) ON DELETE CASCADE,
  FOREIGN KEY (`actor_user_id`) REFERENCES `users`(`user_id`) ON DELETE CASCADE,
 INDEX idx_user_notifications (user_id, is_read, created_at),
  INDEX idx_notification_type (notification_type),
  INDEX idx_actor_user (actor_user_id)
);

-- 11. Conversations Table (for Messaging)


CREATE TABLE `conversations` (
  `conversation_id` INT AUTO_INCREMENT PRIMARY KEY,
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


-- 12. Conversation Participants Table (Many-to-Many for conversations)


CREATE TABLE `conversation_participants` (
  `conversation_id` INT,
  `user_id` INT,
  PRIMARY KEY (`conversation_id`, `user_id`),
  FOREIGN KEY (`conversation_id`) REFERENCES `conversations`(`conversation_id`) ON DELETE CASCADE,
  FOREIGN KEY (`user_id`) REFERENCES `users`(`user_id`) ON DELETE CASCADE
);


-- 13. Messages Table


CREATE TABLE `messages` (
  `message_id` INT AUTO_INCREMENT PRIMARY KEY,
  `conversation_id` INT,
  `sender_id` INT,
  `content` TEXT NOT NULL,
  `message_type` ENUM('text', 'image') DEFAULT 'text',
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (`conversation_id`) REFERENCES `conversations`(`conversation_id`) ON DELETE CASCADE,
  FOREIGN KEY (`sender_id`) REFERENCES `users`(`user_id`) ON DELETE CASCADE
);


-- 14. Groups Table


CREATE TABLE `groups` (
  `group_id` INT AUTO_INCREMENT PRIMARY KEY,
  `name` VARCHAR(255) NOT NULL,
  `description` TEXT NOT NULL,
  `status` ENUM('pending', 'active', 'rejected') NOT NULL DEFAULT 'active',
  `image_url` VARCHAR(255),
  `background_image_url` VARCHAR(255) NULL DEFAULT NULL AFTER `image_url`,
  `created_by` INT,
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (`created_by`) REFERENCES `users`(`user_id`) ON DELETE SET NULL
);


-- 15. Group Members Table (Many-to-Many for groups)


CREATE TABLE `group_members` (
  `group_id` INT,
  `user_id` INT,
  `role` ENUM('admin', 'member') NOT NULL DEFAULT 'member' AFTER `user_id`,
  `status` ENUM('pending', 'approved', 'rejected') NOT NULL DEFAULT 'approved',
  `joined_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`group_id`, `user_id`),
  FOREIGN KEY (`group_id`) REFERENCES `groups`(`group_id`) ON DELETE CASCADE,
  FOREIGN KEY (`user_id`) REFERENCES `users`(`user_id`) ON DELETE CASCADE
);


-- 16. Group Creation Requests Table


CREATE TABLE `group_creation_requests` (
  `request_id` INT AUTO_INCREMENT PRIMARY KEY,
  `user_id` INT NOT NULL,
  `group_name` VARCHAR(255) NOT NULL,
  `image_url` VARCHAR(255) NULL DEFAULT NULL AFTER `group_description`,
  `background_image_url` VARCHAR(255) NULL DEFAULT NULL AFTER `image_url`,
  `group_description` TEXT NOT NULL,
  `status` ENUM('pending', 'approved', 'rejected') DEFAULT 'pending',
  `requested_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (`user_id`) REFERENCES `users`(`user_id`) ON DELETE CASCADE
);


-- 17. Group Join Requests Table


CREATE TABLE `group_join_requests` (
  `request_id` INT AUTO_INCREMENT PRIMARY KEY,
  `group_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  `status` ENUM('pending', 'approved', 'rejected') DEFAULT 'pending',
  `requested_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UNIQUE KEY `unique_join_request` (`group_id`, `user_id`),
  FOREIGN KEY (`group_id`) REFERENCES `groups`(`group_id`) ON DELETE CASCADE,
  FOREIGN KEY (`user_id`) REFERENCES `users`(`user_id`) ON DELETE CASCADE
);


-- 18. Announcements Table


CREATE TABLE `announcements` (
  `announcement_id` INT AUTO_INCREMENT PRIMARY KEY,
  `title` VARCHAR(255) NOT NULL,
  `content` TEXT NOT NULL,
  `author_id` INT,
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (`author_id`) REFERENCES `users`(`user_id`) ON DELETE SET NULL
);


-- 19. Group Posts Table


CREATE TABLE `group_posts` (
    `post_id` INT AUTO_INCREMENT PRIMARY KEY,
    `group_id` INT NOT NULL,
    `user_id` INT NOT NULL,
    `content` TEXT NOT NULL,
    `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (`group_id`) REFERENCES `groups`(`group_id`) ON DELETE CASCADE,
    FOREIGN KEY (`user_id`) REFERENCES `users`(`user_id`) ON DELETE CASCADE
);


-- 20. Group Post Comments Table


CREATE TABLE `group_post_comments` (
    `comment_id` INT AUTO_INCREMENT PRIMARY KEY,
    `post_id` INT NOT NULL,
    `user_id` INT NOT NULL,
    `content` TEXT NOT NULL,
    `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (`post_id`) REFERENCES `group_posts`(`post_id`) ON DELETE CASCADE,
    FOREIGN KEY (`user_id`) REFERENCES `users`(`user_id`) ON DELETE CASCADE
);


--21. Donations to track donations


CREATE TABLE `donations` (
  `donation_id` INT AUTO_INCREMENT PRIMARY KEY,
  `campaign_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  `amount` DECIMAL(10, 2) NOT NULL,
  `donation_date` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (`campaign_id`) REFERENCES `campaigns`(`campaign_id`) ON DELETE CASCADE,
  FOREIGN KEY (`user_id`) REFERENCES `users`(`user_id`) ON DELETE CASCADE
);


--22. Blog_comments


CREATE TABLE `blog_comments` (
  `comment_id` INT AUTO_INCREMENT PRIMARY KEY,
  `blog_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  `content` TEXT NOT NULL,
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (`blog_id`) REFERENCES `blogs`(`blog_id`) ON DELETE CASCADE,
  FOREIGN KEY (`user_id`) REFERENCES `users`(`user_id`) ON DELETE CASCADE
);


-- 23. Create a new table to track invitations to groups


CREATE TABLE `group_invites` (
  `invite_id` INT AUTO_INCREMENT PRIMARY KEY,
  `group_id` INT NOT NULL,
  `inviter_id` INT NOT NULL,
  `invitee_id` INT NOT NULL,
  `status` ENUM('pending', 'accepted', 'declined') DEFAULT 'pending',
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (`group_id`) REFERENCES `groups`(`group_id`) ON DELETE CASCADE,
  FOREIGN KEY (`inviter_id`) REFERENCES `users`(`user_id`) ON DELETE CASCADE,
  FOREIGN KEY (`invitee_id`) REFERENCES `users`(`user_id`) ON DELETE CASCADE,
  UNIQUE KEY `unique_invite` (`group_id`, `invitee_id`)
);


-- 24. create a new table to track verifications reuests 


CREATE TABLE `verification_requests` (
  `request_id` INT NOT NULL AUTO_INCREMENT,
  `user_id` INT NOT NULL,
  `status` ENUM('pending', 'approved', 'rejected') NOT NULL DEFAULT 'pending',
  `document_url` VARCHAR(255) NOT NULL,
  `document_path` VARCHAR(255) NULL AFTER `user_id`,
  `created_at` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `reviewed_by` INT NULL,
  PRIMARY KEY (`request_id`),
  INDEX `user_id_fk_idx` (`user_id` ASC),
  INDEX `reviewed_by_fk_idx` (`reviewed_by` ASC),
  CONSTRAINT `fk_verification_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `users` (`user_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_verification_reviewed_by`
    FOREIGN KEY (`reviewed_by`)
    REFERENCES `users` (`user_id`)
    ON DELETE SET NULL
    ON UPDATE CASCADE
);


--25. Main threads table


CREATE TABLE IF NOT EXISTS threads (
    thread_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    title VARCHAR(200) NOT NULL,
    thread_type ENUM('discussion', 'question', 'announcement', 'poll') DEFAULT 'discussion',
    category VARCHAR(100) DEFAULT NULL,
    content TEXT,
    media_url VARCHAR(255) DEFAULT NULL,
    media_type ENUM('image', 'video') DEFAULT NULL,
    media_caption TEXT DEFAULT NULL,
    location VARCHAR(255) DEFAULT NULL,
    is_anonymous BOOLEAN DEFAULT FALSE,
    target_audience ENUM('all', 'alumni', 'students', 'faculty') DEFAULT 'all',
    batch_year VARCHAR(20) DEFAULT NULL,
    tags VARCHAR(500) DEFAULT NULL,
    content_warning ENUM('none', 'sensitive', 'nsfw') DEFAULT 'none',
    scheduled_at TIMESTAMP DEFAULT NULL,
    is_published BOOLEAN DEFAULT TRUE,
    read_time INT DEFAULT 0,
    visibility ENUM('public', 'alumni', 'followers', 'private') DEFAULT 'public',
    is_pinned BOOLEAN DEFAULT FALSE,
    is_featured BOOLEAN DEFAULT FALSE,
    edit_count INT DEFAULT 0,
    last_edited_at TIMESTAMP DEFAULT NULL,
    view_count INT DEFAULT 0,
    engagement_score INT DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    INDEX idx_user_id (user_id),
    INDEX idx_created_at (created_at),
    INDEX idx_location (location),
    INDEX idx_threads_visibility (visibility, created_at),
    INDEX idx_threads_featured (is_featured, created_at),
    INDEX idx_threads_engagement (engagement_score DESC),
    INDEX idx_threads_type (thread_type),
    INDEX idx_threads_category (category),
    INDEX idx_threads_published (is_published, scheduled_at)
);


--26. Thread likes table


CREATE TABLE IF NOT EXISTS thread_likes (
    like_id INT AUTO_INCREMENT PRIMARY KEY,
    thread_id INT NOT NULL,
    user_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (thread_id) REFERENCES threads(thread_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    UNIQUE KEY unique_like (thread_id, user_id),
    INDEX idx_thread_id (thread_id),
    INDEX idx_user_id (user_id)
);


--27. Thread comments table


CREATE TABLE IF NOT EXISTS thread_comments (
    comment_id INT AUTO_INCREMENT PRIMARY KEY,
    thread_id INT NOT NULL,
    parent_comment_id INT DEFAULT NULL,
    user_id INT NOT NULL,
    content TEXT NOT NULL,
    is_edited BOOLEAN DEFAULT FALSE,
    edited_at TIMESTAMP DEFAULT NULL,
    like_count INT DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (thread_id) REFERENCES threads(thread_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (parent_comment_id) REFERENCES thread_comments(comment_id) ON DELETE CASCADE,
    INDEX idx_thread_id (thread_id),
    INDEX idx_user_id (user_id),
    INDEX idx_created_at (created_at),
    INDEX idx_thread_comments_parent (parent_comment_id, created_at)
);


--28. Thread shares table


CREATE TABLE IF NOT EXISTS thread_shares (
    share_id INT AUTO_INCREMENT PRIMARY KEY,
    thread_id INT NOT NULL,
    user_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (thread_id) REFERENCES threads(thread_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    UNIQUE KEY unique_share (thread_id, user_id),
    INDEX idx_thread_id (thread_id),
    INDEX idx_user_id (user_id)
);


--29. Hashtags table


CREATE TABLE IF NOT EXISTS hashtags (
    hashtag_id INT AUTO_INCREMENT PRIMARY KEY,
    tag_name VARCHAR(100) NOT NULL UNIQUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    INDEX idx_tag_name (tag_name)
);


--30. Thread hashtags junction table


CREATE TABLE IF NOT EXISTS thread_hashtags (
    thread_id INT NOT NULL,
    hashtag_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (thread_id, hashtag_id),
    FOREIGN KEY (thread_id) REFERENCES threads(thread_id) ON DELETE CASCADE,
    FOREIGN KEY (hashtag_id) REFERENCES hashtags(hashtag_id) ON DELETE CASCADE,
    INDEX idx_thread_id (thread_id),
    INDEX idx_hashtag_id (hashtag_id)
);


--31. Thread mentions table


CREATE TABLE IF NOT EXISTS thread_mentions (
    mention_id INT AUTO_INCREMENT PRIMARY KEY,
    thread_id INT NOT NULL,
    mentioned_user_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (thread_id) REFERENCES threads(thread_id) ON DELETE CASCADE,
    FOREIGN KEY (mentioned_user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    UNIQUE KEY unique_mention (thread_id, mentioned_user_id),
    INDEX idx_thread_id (thread_id),
    INDEX idx_mentioned_user_id (mentioned_user_id)
);


--32. Stories table


CREATE TABLE IF NOT EXISTS stories (
    story_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    content TEXT DEFAULT NULL,
    media_url VARCHAR(255) DEFAULT NULL,
    media_type ENUM('image', 'video') DEFAULT NULL,
    background_color VARCHAR(7) DEFAULT NULL, -- For text-only stories
    text_color VARCHAR(7) DEFAULT '#FFFFFF',
    story_type ENUM('text', 'photo', 'video', 'poll') DEFAULT 'text',
    privacy_level ENUM('public', 'alumni', 'close-friends', 'private') DEFAULT 'public',
    allow_reactions BOOLEAN DEFAULT TRUE,
    allow_replies BOOLEAN DEFAULT TRUE,
    allow_screenshot BOOLEAN DEFAULT FALSE,
    location VARCHAR(255) DEFAULT NULL,
    text_effect ENUM('none', 'shadow', 'outline', 'glow') DEFAULT 'none',
    poll_question TEXT DEFAULT NULL,
    poll_options JSON DEFAULT NULL,
    poll_allow_multiple BOOLEAN DEFAULT FALSE,
    expires_at TIMESTAMP NOT NULL,
    view_count INT DEFAULT 0,
    screenshot_count INT DEFAULT 0,
    share_count INT DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    INDEX idx_user_id (user_id),
    INDEX idx_created_at (created_at),
    INDEX idx_expires_at (expires_at),
    INDEX idx_stories_type_privacy (story_type, privacy_level),
    INDEX idx_stories_user_created (user_id, created_at),
    INDEX idx_stories_expires_created (expires_at, created_at),
    INDEX idx_stories_view_count (view_count DESC)
);


--33. Story views table


CREATE TABLE IF NOT EXISTS story_views (
    view_id INT AUTO_INCREMENT PRIMARY KEY,
    story_id INT NOT NULL,
    viewer_user_id INT NOT NULL,
    viewed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (story_id) REFERENCES stories(story_id) ON DELETE CASCADE,
    FOREIGN KEY (viewer_user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    UNIQUE KEY unique_view (story_id, viewer_user_id),
    INDEX idx_story_id (story_id),
    INDEX idx_viewer_user_id (viewer_user_id)
);


--34. Story likes table


CREATE TABLE IF NOT EXISTS story_likes (
    like_id INT AUTO_INCREMENT PRIMARY KEY,
    story_id INT NOT NULL,
    user_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (story_id) REFERENCES stories(story_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    UNIQUE KEY unique_story_like (story_id, user_id),
    INDEX idx_story_likes_story_id (story_id),
    INDEX idx_story_likes_user_id (user_id)
);


--35. Story replies table


CREATE TABLE IF NOT EXISTS story_replies (
    reply_id INT AUTO_INCREMENT PRIMARY KEY,
    story_id INT NOT NULL,
    user_id INT NOT NULL,
    content TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (story_id) REFERENCES stories(story_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    INDEX idx_story_replies_story_id (story_id),
    INDEX idx_story_replies_user_id (user_id)
);


--36. Story mentions table


CREATE TABLE IF NOT EXISTS story_mentions (
    mention_id INT AUTO_INCREMENT PRIMARY KEY,
    story_id INT NOT NULL,
    mentioned_user_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (story_id) REFERENCES stories(story_id) ON DELETE CASCADE,
    FOREIGN KEY (mentioned_user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    UNIQUE KEY unique_story_mention (story_id, mentioned_user_id),
    INDEX idx_story_mentions_story_id (story_id),
    INDEX idx_story_mentions_user_id (mentioned_user_id)
);


--37. Story poll votes table


CREATE TABLE IF NOT EXISTS story_poll_votes (
    vote_id INT AUTO_INCREMENT PRIMARY KEY,
    story_id INT NOT NULL,
    user_id INT NOT NULL,
    option_index INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (story_id) REFERENCES stories(story_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    INDEX idx_story_poll_votes_story_id (story_id),
    INDEX idx_story_poll_votes_user_id (user_id)
);


--38. Story reactions table (for future emoji reactions)


CREATE TABLE IF NOT EXISTS story_reactions (
    reaction_id INT AUTO_INCREMENT PRIMARY KEY,
    story_id INT NOT NULL,
    user_id INT NOT NULL,
    reaction_type ENUM('like', 'love', 'laugh', 'wow', 'sad', 'angry', 'fire', 'clap') DEFAULT 'like',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (story_id) REFERENCES stories(story_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    UNIQUE KEY unique_story_reaction (story_id, user_id, reaction_type),
    INDEX idx_story_reactions_story_id (story_id),
    INDEX idx_story_reactions_user_id (user_id)
);


--39. Story templates table (for predefined templates)


CREATE TABLE IF NOT EXISTS story_templates (
    template_id INT AUTO_INCREMENT PRIMARY KEY,
    template_name VARCHAR(100) NOT NULL,
    template_type ENUM('graduation', 'achievement', 'networking', 'career', 'announcement', 'celebration') NOT NULL,
    background_color VARCHAR(7) NOT NULL,
    text_color VARCHAR(7) NOT NULL,
    text_effect ENUM('none', 'shadow', 'outline', 'glow') DEFAULT 'none',
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    INDEX idx_story_templates_type (template_type)
);


--40. Story drafts table (for saved drafts)


CREATE TABLE IF NOT EXISTS story_drafts (
    draft_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    story_type ENUM('text', 'photo', 'video', 'poll') DEFAULT 'text',
    content TEXT DEFAULT NULL,
    background_color VARCHAR(7) DEFAULT NULL,
    text_color VARCHAR(7) DEFAULT NULL,
    text_effect ENUM('none', 'shadow', 'outline', 'glow') DEFAULT 'none',
    privacy_level ENUM('public', 'alumni', 'close-friends', 'private') DEFAULT 'public',
    location VARCHAR(255) DEFAULT NULL,
    poll_question TEXT DEFAULT NULL,
    poll_options JSON DEFAULT NULL,
    mentioned_users JSON DEFAULT NULL,
    settings JSON DEFAULT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    INDEX idx_story_drafts_user_id (user_id)
);


--41. Story analytics table (for detailed analytics)


CREATE TABLE IF NOT EXISTS story_analytics (
    analytics_id INT AUTO_INCREMENT PRIMARY KEY,
    story_id INT NOT NULL,
    total_views INT DEFAULT 0,
    total_likes INT DEFAULT 0,
    total_replies INT DEFAULT 0,
    total_shares INT DEFAULT 0,
    unique_viewers INT DEFAULT 0,
    engagement_rate DECIMAL(5,2) DEFAULT 0,
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (story_id) REFERENCES stories(story_id) ON DELETE CASCADE,
    UNIQUE KEY unique_story_analytics (story_id)
);


--42. Story shares table (for tracking shares)


CREATE TABLE IF NOT EXISTS story_shares (
    share_id INT AUTO_INCREMENT PRIMARY KEY,
    story_id INT NOT NULL,
    user_id INT NOT NULL,
    share_type ENUM('direct', 'external', 'embed') DEFAULT 'direct',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (story_id) REFERENCES stories(story_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    INDEX idx_story_shares_story_id (story_id),
    INDEX idx_story_shares_user_id (user_id)
);


--43. Close friends list table


CREATE TABLE IF NOT EXISTS user_close_friends (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    friend_user_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (friend_user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    UNIQUE KEY unique_close_friend (user_id, friend_user_id),
    INDEX idx_close_friends_user_id (user_id),
    INDEX idx_close_friends_friend_id (friend_user_id)
);


--44. Story highlights table (for saving stories permanently)


CREATE TABLE IF NOT EXISTS story_highlights (
    highlight_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    highlight_name VARCHAR(100) NOT NULL,
    cover_image_url VARCHAR(255) DEFAULT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    INDEX idx_story_highlights_user_id (user_id)
);


--45. Story highlight items table


CREATE TABLE IF NOT EXISTS story_highlight_items (
    item_id INT AUTO_INCREMENT PRIMARY KEY,
    highlight_id INT NOT NULL,
    story_id INT NOT NULL,
    added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (highlight_id) REFERENCES story_highlights(highlight_id) ON DELETE CASCADE,
    FOREIGN KEY (story_id) REFERENCES stories(story_id) ON DELETE CASCADE,
    UNIQUE KEY unique_highlight_story (highlight_id, story_id),
    INDEX idx_highlight_items_highlight_id (highlight_id),
    INDEX idx_highlight_items_story_id (story_id)
);


--46. User Follows Table - Manages follower/following relationships


CREATE TABLE IF NOT EXISTS user_follows (
    follow_id INT AUTO_INCREMENT PRIMARY KEY,
    follower_user_id INT NOT NULL COMMENT 'User who is following',
    following_user_id INT NOT NULL COMMENT 'User being followed',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (follower_user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (following_user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    UNIQUE KEY unique_follow (follower_user_id, following_user_id),
    INDEX idx_follower (follower_user_id),
    INDEX idx_following (following_user_id),
    CHECK (follower_user_id != following_user_id)
);


--47. User Social Stats Table - Cached statistics for performance


CREATE TABLE IF NOT EXISTS user_social_stats (
    user_id INT PRIMARY KEY,
    followers_count INT DEFAULT 0 COMMENT 'Number of followers',
    following_count INT DEFAULT 0 COMMENT 'Number of users being followed',
    threads_count INT DEFAULT 0 COMMENT 'Number of threads created',
    total_threads INT DEFAULT 0 COMMENT 'Total number of threads created (for trigger compatibility)',
    stories_count INT DEFAULT 0 COMMENT 'Number of active stories',
    total_stories INT DEFAULT 0 COMMENT 'Total number of stories created',
    total_views INT DEFAULT 0 COMMENT 'Total views across all content',
    total_bookmarks_received INT DEFAULT 0 COMMENT 'Total bookmarks received',
    avg_engagement_rate DECIMAL(5,2) DEFAULT 0.00 COMMENT 'Average engagement rate',
    profile_views INT DEFAULT 0 COMMENT 'Profile page views',
    reach_count INT DEFAULT 0 COMMENT 'Total reach',
    total_likes_received INT DEFAULT 0 COMMENT 'Total likes received on all content',
    total_comments_received INT DEFAULT 0 COMMENT 'Total comments received on all content',
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    INDEX idx_stats_updated (last_updated)
);




--48. Thread Bookmarks Table


CREATE TABLE IF NOT EXISTS thread_bookmarks (
    bookmark_id INT AUTO_INCREMENT PRIMARY KEY,
    thread_id INT NOT NULL,
    user_id INT NOT NULL,
    collection_name VARCHAR(100) DEFAULT 'Saved',
    notes TEXT DEFAULT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (thread_id) REFERENCES threads(thread_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    UNIQUE KEY unique_bookmark (thread_id, user_id),
    INDEX idx_thread_bookmarks_user (user_id, created_at),
    INDEX idx_thread_bookmarks_collection (user_id, collection_name)
);


--49. Thread Views Table


CREATE TABLE IF NOT EXISTS thread_views (
    view_id INT AUTO_INCREMENT PRIMARY KEY,
    thread_id INT NOT NULL,
    user_id INT DEFAULT NULL,
    ip_address VARCHAR(45) DEFAULT NULL,
    user_agent TEXT DEFAULT NULL,
    view_duration_seconds INT DEFAULT 0,
    viewed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (thread_id) REFERENCES threads(thread_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE SET NULL,
    INDEX idx_thread_views_thread (thread_id, viewed_at),
    INDEX idx_thread_views_user (user_id, viewed_at)
);


--50. Thread Reports Table


CREATE TABLE IF NOT EXISTS thread_reports (
    report_id INT AUTO_INCREMENT PRIMARY KEY,
    thread_id INT NOT NULL,
    reporter_user_id INT NOT NULL,
    reason ENUM('spam', 'harassment', 'hate-speech', 'misinformation', 'inappropriate', 'other') NOT NULL,
    description TEXT DEFAULT NULL,
    status ENUM('pending', 'reviewing', 'resolved', 'dismissed') DEFAULT 'pending',
    reviewed_by INT DEFAULT NULL,
    reviewed_at TIMESTAMP DEFAULT NULL,
    resolution_notes TEXT DEFAULT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (thread_id) REFERENCES threads(thread_id) ON DELETE CASCADE,
    FOREIGN KEY (reporter_user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (reviewed_by) REFERENCES users(user_id) ON DELETE SET NULL,
    INDEX idx_thread_reports_status (status, created_at),
    INDEX idx_thread_reports_thread (thread_id)
);


--51. Thread Drafts Table


CREATE TABLE IF NOT EXISTS thread_drafts (
    draft_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    content TEXT DEFAULT NULL,
    media_url VARCHAR(255) DEFAULT NULL,
    media_type ENUM('image', 'video') DEFAULT NULL,
    media_caption TEXT DEFAULT NULL,
    location VARCHAR(255) DEFAULT NULL,
    hashtags TEXT DEFAULT NULL,
    mentions TEXT DEFAULT NULL,
    visibility ENUM('public', 'alumni', 'followers', 'private') DEFAULT 'public',
    scheduled_at TIMESTAMP DEFAULT NULL,
    last_edited_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    INDEX idx_thread_drafts_user (user_id, last_edited_at)
);


--52. Story Bookmarks Table


CREATE TABLE IF NOT EXISTS story_bookmarks (
    bookmark_id INT AUTO_INCREMENT PRIMARY KEY,
    story_id INT NOT NULL,
    user_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (story_id) REFERENCES stories(story_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    UNIQUE KEY unique_story_bookmark (story_id, user_id),
    INDEX idx_story_bookmarks_user (user_id, created_at)
);


--53. User Feed Preferences Table


CREATE TABLE IF NOT EXISTS user_feed_preferences (
    preference_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL UNIQUE,
    feed_algorithm ENUM('latest', 'trending', 'following', 'recommended') DEFAULT 'recommended',
    show_reposts BOOLEAN DEFAULT TRUE,
    show_replies BOOLEAN DEFAULT TRUE,
    content_filter ENUM('all', 'safe', 'strict') DEFAULT 'safe',
    muted_words TEXT DEFAULT NULL,
    preferred_categories JSON DEFAULT NULL,
    notification_frequency ENUM('instant', 'hourly', 'daily', 'weekly') DEFAULT 'instant',
    email_digest BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);


--54. Thread Analytics Table


CREATE TABLE IF NOT EXISTS thread_analytics (
    analytics_id INT AUTO_INCREMENT PRIMARY KEY,
    thread_id INT NOT NULL,
    date DATE NOT NULL,
    views_count INT DEFAULT 0,
    unique_views_count INT DEFAULT 0,
    likes_count INT DEFAULT 0,
    comments_count INT DEFAULT 0,
    shares_count INT DEFAULT 0,
    bookmarks_count INT DEFAULT 0,
    avg_read_time_seconds INT DEFAULT 0,
    engagement_rate DECIMAL(5,2) DEFAULT 0.00,
    reach_count INT DEFAULT 0,
    impression_count INT DEFAULT 0,
    click_through_rate DECIMAL(5,2) DEFAULT 0.00,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (thread_id) REFERENCES threads(thread_id) ON DELETE CASCADE,
    UNIQUE KEY unique_thread_analytics (thread_id, date),
    INDEX idx_thread_analytics_date (date),
    INDEX idx_thread_analytics_engagement (engagement_rate DESC)
);


--55. Engagement Metrics Table


CREATE TABLE IF NOT EXISTS engagement_metrics (
    metric_id INT AUTO_INCREMENT PRIMARY KEY,
    entity_type ENUM('thread', 'story', 'comment', 'profile') NOT NULL,
    entity_id INT NOT NULL,
    user_id INT NOT NULL,
    action_type ENUM('view', 'like', 'comment', 'share', 'bookmark', 'click', 'hover') NOT NULL,
    duration_seconds INT DEFAULT NULL,
    metadata JSON DEFAULT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    INDEX idx_engagement_entity (entity_type, entity_id, action_type),
    INDEX idx_engagement_user (user_id, created_at),
    INDEX idx_engagement_action (action_type, created_at)
);


--56. Notification Preferences Table


CREATE TABLE IF NOT EXISTS notification_preferences (
    preference_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL UNIQUE,
    email_notifications BOOLEAN DEFAULT TRUE,
    push_notifications BOOLEAN DEFAULT TRUE,
    sms_notifications BOOLEAN DEFAULT FALSE,
    notify_on_follow BOOLEAN DEFAULT TRUE,
    notify_on_like BOOLEAN DEFAULT TRUE,
    notify_on_comment BOOLEAN DEFAULT TRUE,
    notify_on_mention BOOLEAN DEFAULT TRUE,
    notify_on_share BOOLEAN DEFAULT TRUE,
    notify_on_reply BOOLEAN DEFAULT TRUE,
    notify_on_story_view BOOLEAN DEFAULT FALSE,
    notify_on_story_reaction BOOLEAN DEFAULT TRUE,
    quiet_hours_start TIME DEFAULT NULL,
    quiet_hours_end TIME DEFAULT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);


--57. Trending Topics Table


CREATE TABLE IF NOT EXISTS trending_topics (
    trending_id INT AUTO_INCREMENT PRIMARY KEY,
    hashtag_id INT NOT NULL,
    date DATE NOT NULL,
    mention_count INT DEFAULT 0,
    thread_count INT DEFAULT 0,
    user_count INT DEFAULT 0,
    engagement_score INT DEFAULT 0,
    rank_position INT DEFAULT NULL,
    category VARCHAR(50) DEFAULT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (hashtag_id) REFERENCES hashtags(hashtag_id) ON DELETE CASCADE,
    UNIQUE KEY unique_trending (hashtag_id, date),
    INDEX idx_trending_date (date, rank_position),
    INDEX idx_trending_score (engagement_score DESC)
);


--58. Thread Reactions Table


CREATE TABLE IF NOT EXISTS thread_reactions (
    reaction_id INT AUTO_INCREMENT PRIMARY KEY,
    thread_id INT NOT NULL,
    user_id INT NOT NULL,
    reaction_type ENUM('like', 'love', 'insightful', 'celebrate', 'support', 'funny') NOT NULL DEFAULT 'like',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (thread_id) REFERENCES threads(thread_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    UNIQUE KEY unique_thread_reaction (thread_id, user_id, reaction_type),
    INDEX idx_thread_reactions_thread (thread_id, reaction_type),
    INDEX idx_thread_reactions_user (user_id, created_at)
);


--59. Comment Reactions Table


CREATE TABLE IF NOT EXISTS comment_reactions (
    reaction_id INT AUTO_INCREMENT PRIMARY KEY,
    comment_id INT NOT NULL,
    user_id INT NOT NULL,
    reaction_type ENUM('like', 'love', 'insightful', 'funny') NOT NULL DEFAULT 'like',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (comment_id) REFERENCES thread_comments(comment_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    UNIQUE KEY unique_comment_reaction (comment_id, user_id, reaction_type),
    INDEX idx_comment_reactions_comment (comment_id),
    INDEX idx_comment_reactions_user (user_id)
);


--60. User Blocks Table


CREATE TABLE IF NOT EXISTS user_blocks (
    block_id INT AUTO_INCREMENT PRIMARY KEY,
    blocker_user_id INT NOT NULL,
    blocked_user_id INT NOT NULL,
    reason VARCHAR(255) DEFAULT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (blocker_user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (blocked_user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    UNIQUE KEY unique_block (blocker_user_id, blocked_user_id),
    INDEX idx_user_blocks_blocker (blocker_user_id),
    INDEX idx_user_blocks_blocked (blocked_user_id)
);


--61. User Mutes Table


CREATE TABLE IF NOT EXISTS user_mutes (
    mute_id INT AUTO_INCREMENT PRIMARY KEY,
    muter_user_id INT NOT NULL,
    muted_user_id INT NOT NULL,
    mute_duration ENUM('temporary', 'permanent') DEFAULT 'permanent',
    unmute_at TIMESTAMP DEFAULT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (muter_user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (muted_user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    UNIQUE KEY unique_mute (muter_user_id, muted_user_id),
    INDEX idx_user_mutes_muter (muter_user_id),
    INDEX idx_user_mutes_unmute (unmute_at)
);


--62. Pinned Threads Table


CREATE TABLE IF NOT EXISTS pinned_threads (
    pin_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    thread_id INT NOT NULL,
    pin_order INT DEFAULT 1,
    pinned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (thread_id) REFERENCES threads(thread_id) ON DELETE CASCADE,
    UNIQUE KEY unique_pinned_thread (user_id, thread_id),
    INDEX idx_pinned_threads_user (user_id, pin_order)
);


--63. Thread Polls Table


CREATE TABLE IF NOT EXISTS thread_polls (
    poll_id INT AUTO_INCREMENT PRIMARY KEY,
    thread_id INT NOT NULL,
    question TEXT NOT NULL,
    options JSON NOT NULL,
    allow_multiple BOOLEAN DEFAULT FALSE,
    duration_hours INT DEFAULT 24,
    expires_at TIMESTAMP NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (thread_id) REFERENCES threads(thread_id) ON DELETE CASCADE,
    INDEX idx_thread_polls_thread (thread_id),
    INDEX idx_thread_polls_expires (expires_at)
);


--64. Poll Votes Table


CREATE TABLE IF NOT EXISTS poll_votes (
    vote_id INT AUTO_INCREMENT PRIMARY KEY,
    poll_id INT NOT NULL,
    user_id INT NOT NULL,
    option_index INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (poll_id) REFERENCES thread_polls(poll_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    INDEX idx_poll_votes_poll (poll_id),
    INDEX idx_poll_votes_user (user_id)
);


--65. Scheduled Threads Table


CREATE TABLE IF NOT EXISTS scheduled_threads (
    scheduled_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    content TEXT NOT NULL,
    media_url VARCHAR(255) DEFAULT NULL,
    media_type ENUM('image', 'video') DEFAULT NULL,
    media_caption TEXT DEFAULT NULL,
    location VARCHAR(255) DEFAULT NULL,
    hashtags TEXT DEFAULT NULL,
    visibility ENUM('public', 'alumni', 'followers', 'private') DEFAULT 'public',
    scheduled_for TIMESTAMP NOT NULL,
    status ENUM('pending', 'posted', 'failed', 'cancelled') DEFAULT 'pending',
    posted_thread_id INT DEFAULT NULL,
    error_message TEXT DEFAULT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (posted_thread_id) REFERENCES threads(thread_id) ON DELETE SET NULL,
    INDEX idx_scheduled_threads_user (user_id, scheduled_for),
    INDEX idx_scheduled_threads_status (status, scheduled_for)
);


--66. Thread Tags Table


CREATE TABLE IF NOT EXISTS thread_tags (
    tag_id INT AUTO_INCREMENT PRIMARY KEY,
    tag_name VARCHAR(50) NOT NULL UNIQUE,
    tag_slug VARCHAR(50) NOT NULL UNIQUE,
    description TEXT DEFAULT NULL,
    icon VARCHAR(50) DEFAULT NULL,
    color VARCHAR(7) DEFAULT '#3B82F6',
    is_active BOOLEAN DEFAULT TRUE,
    thread_count INT DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    INDEX idx_thread_tags_slug (tag_slug),
    INDEX idx_thread_tags_active (is_active, thread_count DESC)
);


--67. Thread Tag Junction Table


CREATE TABLE IF NOT EXISTS thread_tag_junction (
    thread_id INT NOT NULL,
    tag_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (thread_id, tag_id),
    FOREIGN KEY (thread_id) REFERENCES threads(thread_id) ON DELETE CASCADE,
    FOREIGN KEY (tag_id) REFERENCES thread_tags(tag_id) ON DELETE CASCADE,
    INDEX idx_thread_tag_junction_tag (tag_id, created_at)
);


-- ====================================================================
-- PHASE 2 ENHANCEMENTS - Real-Time Features & Backend Integration
-- Added: 2025-10-11
-- ====================================================================


--68. Thread Co-Authors Table (Phase 2)


CREATE TABLE IF NOT EXISTS thread_coauthors (
    coauthor_id INT AUTO_INCREMENT PRIMARY KEY,
    thread_id INT NOT NULL,
    user_id INT NOT NULL,
    added_by INT NOT NULL,
    added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (thread_id) REFERENCES threads(thread_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (added_by) REFERENCES users(user_id) ON DELETE CASCADE,
    UNIQUE KEY unique_coauthor (thread_id, user_id),
    INDEX idx_thread_coauthors_thread (thread_id),
    INDEX idx_thread_coauthors_user (user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;


--69. Thread Quality Scores Table (Phase 2)


CREATE TABLE IF NOT EXISTS thread_quality_scores (
    score_id INT AUTO_INCREMENT PRIMARY KEY,
    thread_id INT NOT NULL UNIQUE,
    quality_score INT NOT NULL,
    word_count INT DEFAULT 0,
    hashtag_count INT DEFAULT 0,
    mention_count INT DEFAULT 0,
    has_media BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (thread_id) REFERENCES threads(thread_id) ON DELETE CASCADE,
    INDEX idx_quality_scores_score (quality_score DESC)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;


--70. User Milestones Table (Phase 2)


CREATE TABLE IF NOT EXISTS user_milestones (
    milestone_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    thread_id INT DEFAULT NULL,
    milestone_type ENUM('promotion', 'new_job', 'graduation', 'certification', 'award', 'publication', 'patent', 'founded', 'launched', 'other') NOT NULL,
    milestone_title VARCHAR(255) NOT NULL,
    milestone_description TEXT DEFAULT NULL,
    celebration_count INT DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (thread_id) REFERENCES threads(thread_id) ON DELETE SET NULL,
    INDEX idx_milestones_user (user_id, created_at),
    INDEX idx_milestones_type (milestone_type, created_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;


--71. Real-time Activity Log Table (Phase 2)


CREATE TABLE IF NOT EXISTS realtime_activity_log (
    activity_id INT AUTO_INCREMENT PRIMARY KEY,
    activity_type ENUM('view', 'typing', 'reaction', 'comment', 'share') NOT NULL,
    thread_id INT NOT NULL,
    user_id INT DEFAULT NULL,
    session_id VARCHAR(100) DEFAULT NULL,
    duration_seconds INT DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (thread_id) REFERENCES threads(thread_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE SET NULL,
    INDEX idx_activity_thread (thread_id, created_at),
    INDEX idx_activity_user (user_id, created_at),
    INDEX idx_activity_type (activity_type, created_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;


--72. Hashtag Statistics Table (Phase 2)


CREATE TABLE IF NOT EXISTS hashtag_statistics (
    hashtag_id INT AUTO_INCREMENT PRIMARY KEY,
    hashtag VARCHAR(100) NOT NULL UNIQUE,
    usage_count INT DEFAULT 1,
    last_used_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    trending_score FLOAT DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    INDEX idx_hashtags_usage (usage_count DESC),
    INDEX idx_hashtags_trending (trending_score DESC),
    INDEX idx_hashtags_recent (last_used_at DESC)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;


--73. User Engagement Metrics Table (Phase 2)


CREATE TABLE IF NOT EXISTS user_engagement_metrics (
    metric_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    date DATE NOT NULL,
    threads_created INT DEFAULT 0,
    comments_made INT DEFAULT 0,
    reactions_given INT DEFAULT 0,
    reactions_received INT DEFAULT 0,
    threads_viewed INT DEFAULT 0,
    time_spent_minutes INT DEFAULT 0,
    engagement_score FLOAT DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    UNIQUE KEY unique_user_date (user_id, date),
    INDEX idx_engagement_user (user_id, date),
    INDEX idx_engagement_score (engagement_score DESC)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;


-- ====================================================================
-- PHASE 2 STORED PROCEDURES
-- ====================================================================


-- Procedure to increment hashtag usage
DELIMITER //
CREATE PROCEDURE IF NOT EXISTS increment_hashtag_usage(IN hashtag_text VARCHAR(100))
BEGIN
    INSERT INTO hashtag_statistics (hashtag, usage_count, last_used_at)
    VALUES (hashtag_text, 1, NOW())
    ON DUPLICATE KEY UPDATE
        usage_count = usage_count + 1,
        last_used_at = NOW(),
        trending_score = trending_score + (1.0 / TIMESTAMPDIFF(HOUR, last_used_at, NOW()) + 1);
END//
DELIMITER ;


-- Procedure to update user engagement metrics
DELIMITER //
CREATE PROCEDURE IF NOT EXISTS update_user_engagement(
    IN p_user_id INT,
    IN p_date DATE,
    IN p_threads INT,
    IN p_comments INT,
    IN p_reactions_given INT,
    IN p_reactions_received INT
)
BEGIN
    INSERT INTO user_engagement_metrics (
        user_id, date, threads_created, comments_made, 
        reactions_given, reactions_received, engagement_score
    )
    VALUES (
        p_user_id, p_date, p_threads, p_comments,
        p_reactions_given, p_reactions_received,
        (p_threads * 10 + p_comments * 5 + p_reactions_given * 2 + p_reactions_received * 3)
    )
    ON DUPLICATE KEY UPDATE
        threads_created = threads_created + p_threads,
        comments_made = comments_made + p_comments,
        reactions_given = reactions_given + p_reactions_given,
        reactions_received = reactions_received + p_reactions_received,
        engagement_score = engagement_score + (p_threads * 10 + p_comments * 5 + p_reactions_given * 2 + p_reactions_received * 3);
END//
DELIMITER ;


-- ====================================================================
-- PHASE 2 MODIFICATIONS TO EXISTING TABLES
-- ====================================================================


-- Modified table 58 (thread_reactions) to change UNIQUE KEY
-- Original had: UNIQUE KEY unique_thread_reaction (thread_id, user_id, reaction_type)
-- Changed to: UNIQUE KEY unique_reaction (thread_id, user_id)
-- Reason: Allow users to change their reaction type (only one reaction per user per thread)

ALTER TABLE thread_reactions 
DROP INDEX IF EXISTS unique_thread_reaction,
ADD UNIQUE KEY unique_reaction (thread_id, user_id);


-- Modified table 59 (comment_reactions) to use same reaction types as thread_reactions
-- Added 'celebrate' and 'support' reaction types for consistency

ALTER TABLE comment_reactions
MODIFY COLUMN reaction_type ENUM('like', 'love', 'insightful', 'celebrate', 'support', 'funny') NOT NULL;


-- Add indexes to existing tables for Phase 2 performance
ALTER TABLE threads ADD INDEX IF NOT EXISTS idx_threads_created (created_at DESC);
ALTER TABLE threads ADD INDEX IF NOT EXISTS idx_threads_user (user_id, created_at DESC);
ALTER TABLE thread_comments ADD INDEX IF NOT EXISTS idx_comments_thread (thread_id, created_at DESC);

-- Add index for mentor status checks (performance optimization)
ALTER TABLE users ADD INDEX IF NOT EXISTS idx_users_is_mentor (is_mentor);


-- ====================================================================
-- END OF PHASE 2 ENHANCEMENTS
-- Total tables: 73 (67 original + 6 new Phase 2 tables)
-- Note: Tables 58 & 59 were modified for Phase 2 compatibility
-- ====================================================================


-- ====================================================================
-- DIRECTORY FEATURE ENHANCEMENTS - Connection Request System
-- Added: 2025-10-14
-- ====================================================================


--74. Connection Requests Table (Directory Feature)


CREATE TABLE IF NOT EXISTS `connection_requests` (
  `request_id` INT AUTO_INCREMENT PRIMARY KEY,
  `from_user_id` INT NOT NULL,
  `to_user_id` INT NOT NULL,
  `status` ENUM('pending', 'accepted', 'rejected') DEFAULT 'pending',
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (`from_user_id`) REFERENCES `users`(`user_id`) ON DELETE CASCADE,
  FOREIGN KEY (`to_user_id`) REFERENCES `users`(`user_id`) ON DELETE CASCADE,
  UNIQUE KEY `unique_connection_request` (`from_user_id`, `to_user_id`),
  INDEX `idx_to_user` (`to_user_id`, `status`),
  INDEX `idx_from_user` (`from_user_id`, `status`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;


--75. Connections Table (Directory Feature)


CREATE TABLE IF NOT EXISTS `connections` (
  `connection_id` INT AUTO_INCREMENT PRIMARY KEY,
  `user1_id` INT NOT NULL,
  `user2_id` INT NOT NULL,
  `connected_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (`user1_id`) REFERENCES `users`(`user_id`) ON DELETE CASCADE,
  FOREIGN KEY (`user2_id`) REFERENCES `users`(`user_id`) ON DELETE CASCADE,
  UNIQUE KEY `unique_connection` (`user1_id`, `user2_id`),
  INDEX `idx_user1` (`user1_id`),
  INDEX `idx_user2` (`user2_id`),
  CHECK (`user1_id` < `user2_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;


-- ====================================================================
-- END OF DIRECTORY FEATURE ENHANCEMENTS
-- Total tables: 75 (73 previous + 2 new connection tables)
-- ====================================================================
